name: Manual Spellcheck & AI Grammar Correction with Code Comment Support

on:
  workflow_dispatch:  # Runs only when manually triggered

permissions:
  contents: write
  pull-requests: write

jobs:
  spellcheck_grammar_review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt update && sudo apt install -y default-jre  # Install Java for LanguageTool
          export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
          pip install codespell
          pip install fuzzywuzzy[speedup]
          pip install sentence-splitter
          pip install --upgrade lxml
          pip install git+https://github.com/jxmorris12/language_tool_python.git

      - name: Verify Spellcheck Ignore List Exists
        run: |
          if [ ! -f .github/spellcheck-ignore.txt ]; then
            echo "Error: spellcheck-ignore.txt not found!" && exit 1
          fi

      - name: Run Spellcheck and Apply Fixes
        run: |
          set -e  # Exit on error

          python3 <<EOF
          import re
          import os
          import language_tool_python
          from sentence_splitter import SentenceSplitter
          from fuzzywuzzy import process

          # Load spellcheck ignore list with case sensitivity
          ignore_list = {}
          with open(".github/spellcheck-ignore.txt", "r", encoding="utf-8") as f:
              for line in f:
                  word = line.strip()
                  ignore_list[word.lower()] = word  # Store lowercase -> correct-case

          # Load LanguageTool for grammar checking
          tool = language_tool_python.LanguageTool('en-US')

          # Function to detect comments inside code blocks
          def is_comment_in_code_block(line, inside_code_block):
              if re.match(r'^\s*```', line):  # Detects start/end of code blocks
                  return not inside_code_block, False
              return inside_code_block, inside_code_block and bool(re.match(r'^\s*(#|//|/\*)', line))

          # Function to detect URLs and file paths
          def is_code_or_url_or_file(line):
              return bool(re.search(r'`.*?`|https?://\S+|www\.\S+|/[\w./-]+', line))

          # Function to apply spelling corrections
          def preserve_spelling(sentence):
              words = sentence.split()
              corrected_words = [ignore_list.get(word.lower(), word) for word in words]
              return " ".join(corrected_words)

          # Function to apply grammar corrections with structured handling
          def apply_grammar_corrections(sentence):
              matches = tool.check(sentence)
              for match in matches:
                  if match.replacements:
                      sentence = sentence[:match.offset] + match.replacements[0] + sentence[match.offset + len(match.context):]
              return sentence

          # Process each file and apply spelling & grammar corrections
          for root, _, files in os.walk("."):
              for filename in files:
                  if filename.endswith((".md", ".txt", ".py", ".js", ".java", ".cpp", ".ts")):
                      filepath = os.path.join(root, filename)
                      with open(filepath, "r", encoding="utf-8") as file:
                          lines = file.readlines()

                      corrected_lines = []
                      inside_code_block = False

                      for line in lines:
                          original_line = line.strip()
                          inside_code_block, is_comment = is_comment_in_code_block(line, inside_code_block)

                          if inside_code_block and not is_comment:
                              corrected_lines.append(line)
                              continue

                          if not original_line or is_code_or_url_or_file(original_line):
                              corrected_lines.append(line)
                              continue

                          preserved_spelling_line = preserve_spelling(original_line)
                          grammatically_corrected_line = apply_grammar_corrections(preserved_spelling_line)
                          grammatically_corrected_line = grammatically_corrected_line.replace("..", ".").replace(",.", ".").replace(" ,", ",")

                          corrected_lines.append(grammatically_corrected_line + "\n")

                      with open(filepath, "w", encoding="utf-8") as file:
                          file.writelines(corrected_lines)
          EOF

      - name: Create Pull Request with Corrections
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_ACTIONS }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          BRANCH_NAME="spellcheck-grammar-fixes-$(date +%s)"
          git checkout -b $BRANCH_NAME
          git add .
          git commit -m "Spellcheck & Grammar Fixes: Automatically corrected detected issues"
          git push origin $BRANCH_NAME
          gh pr create --base main --head $BRANCH_NAME --title "Spellcheck & Grammar Fixes" --body "This PR contains automatically applied spelling and grammar corrections."
