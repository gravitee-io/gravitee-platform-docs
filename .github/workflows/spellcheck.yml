name: Manual Spellcheck & AI Grammar Correction with Interactive Review

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  spellcheck_review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt update && sudo apt install -y default-jre
          export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
          pip install codespell fuzzywuzzy[speedup] sentence-splitter --upgrade lxml
          pip install git+https://github.com/jxmorris12/language_tool_python.git

      - name: Verify Ignore List Exists
        run: |
          if [ ! -f .github/spellcheck-ignore.txt ]; then
            echo "Error: spellcheck-ignore.txt not found!" && exit 1
          fi

      - name: Run Spellcheck and Generate Review File
        run: |
          set -e

          python3 <<EOF
          import re, os, language_tool_python

          ignore_list = {}
          with open(".github/spellcheck-ignore.txt", "r", encoding="utf-8") as f:
              for line in f:
                  word = line.strip()
                  ignore_list[word.lower()] = word

          tool = language_tool_python.LanguageTool('en-US')

          def is_comment(line, inside_code_block, inside_block_comment):
              if re.match(r'^\s*```', line):  
                  return not inside_code_block, inside_block_comment, False
              if inside_code_block:
                  return inside_code_block, inside_block_comment, bool(re.match(r'^\s*(#|//|\*|\*\*)', line))
              if re.search(r'/\*', line):  
                  return inside_code_block, True, False
              if re.search(r'\*/', line):  
                  return inside_code_block, False, False
              return inside_code_block, inside_block_comment, False

          def is_code_or_url(line):
              return bool(re.search(r'https?://\S+|`.*?`|www\.\S+', line))

          def apply_spellcheck(sentence):
              words = sentence.split()
              return " ".join([ignore_list.get(word.lower(), word) for word in words])

          def apply_grammar(sentence):
              try:
                  matches = tool.check(sentence)
              except Exception:
                  return sentence
              corrections = [(m.offset, m.context, m.replacements[0]) for m in matches if m.replacements and m.context.lower() not in ignore_list]
              for offset, original, replacement in sorted(corrections, key=lambda x: -x[0]):
                  if offset + len(original) <= len(sentence):
                      sentence = sentence[:offset] + replacement + sentence[offset + len(original):]
              return sentence

          changes = []
          for root, _, files in os.walk("."):
              for file in files:
                  if file.endswith((".md", ".txt", ".py", ".js", ".java", ".cpp", ".ts")):
                      path = os.path.join(root, file)
                      lines = open(path, "r", encoding="utf-8").readlines()
                      inside_code, inside_block_comment = False, False
                      for line in lines:
                          orig = line.strip()
                          inside_code, inside_block_comment, is_comment = is_comment(line, inside_code, inside_block_comment)
                          if inside_code and not is_comment or inside_block_comment or not orig or is_code_or_url(orig):
                              continue
                          fixed = apply_spellcheck(orig)
                          corrected = apply_grammar(fixed)
                          corrected = corrected.replace("..", ".").replace(",.", ".").replace(" ,", ",")
                          if corrected != orig:
                              changes.append((path, orig, corrected))

          if changes:
              with open("spellcheck_review.md", "w", encoding="utf-8") as f:
                  f.write("# Spellcheck & Grammar Fixes Review\n\n")
                  for i, (file, original, corrected) in enumerate(changes):
                      f.write(f"### Change {i+1}\n")
                      f.write(f"**File:** `{file}`\n")
                      f.write(f"**Original:** `{original}`\n")
                      f.write(f"**Suggested:** `{corrected}`\n")
                      f.write(f"Approve? (yes/no)\n\n")

          EOF

      - name: Upload Review File
        uses: actions/upload-artifact@v4
        with:
          name: spellcheck-review
          path: spellcheck_review.md

      - name: Pause for Manual Review
        run: |
          echo "ðŸ”¹ Go to GitHub Actions -> Artifacts -> spellcheck-review"
          echo "ðŸ”¹ Download the file and review the suggested changes."
          echo "ðŸ”¹ Edit the file: Replace 'yes' or 'no' for each suggestion."
          echo "ðŸ”¹ Re-upload the file for processing."

      - name: Download Reviewed File
        uses: actions/download-artifact@v4
        with:
          name: spellcheck-review
          path: .

      - name: Apply Only Approved Changes
        run: |
          set -e
          python3 <<EOF
          import os

          if not os.path.exists("spellcheck_review.md"):
              print("No review file found. Exiting.")
              exit(1)

          with open("spellcheck_review.md", "r", encoding="utf-8") as f:
              lines = f.readlines()

          approved_changes = []
          for i in range(len(lines)):
              if "Approve?" in lines[i] and "yes" in lines[i+1].lower():
                  file_line = lines[i-2].strip().replace("**File:** `", "").replace("`", "")
                  orig_line = lines[i-1].strip().replace("**Original:** `", "").replace("`", "")
                  corr_line = lines[i].strip().replace("**Suggested:** `", "").replace("`", "")
                  approved_changes.append((file_line, orig_line, corr_line))

          for file, orig, corr in approved_changes:
              with open(file, "r", encoding="utf-8") as f:
                  contents = f.read()
              contents = contents.replace(orig, corr)
              with open(file, "w", encoding="utf-8") as f:
                  f.write(contents)

          EOF

      - name: Commit & Push Approved Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b spellcheck-approved-fixes
          git add .
          git commit -m "Approved Spellcheck & Grammar Fixes"
          git push origin spellcheck-approved-fixes
          gh pr create --base main --head spellcheck-approved-fixes --title "Approved Spellcheck Fixes"

        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_ACTIONS }}
