name: Spellcheck Documentation

on:
  pull_request:
    branches:
      - main

permissions: write-all
  # contents: read  # Required for reading repository content
  # pull-requests: write  # Required for creating comments on PRs

jobs:
  spellcheck:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          pip install codespell
          pip install fuzzywuzzy[speedup]

      - name: Download Spellcheck Ignore List
        run: |
          if [ ! -f .github/spellcheck-ignore.txt ]; then
            echo "spellcheck-ignore.txt not found!" && exit 1
          fi

      - name: Run Spellcheck and Process Output
        run: |
          set -e  # Exit on error

          # Run codespell and save output
          codespell --ignore-words=.github/spellcheck-ignore.txt \
                    --skip=".git,*.lock,*.json,*.yaml,*.yml,*.css,*.html" \
                    --quiet-level=2 > spellcheck_report_raw.txt || true

          # Process corrections with Python
          python3 <<EOF
          import re
          from fuzzywuzzy import process

          # Load spellcheck ignore list with case sensitivity
          ignore_list = {}
          with open(".github/spellcheck-ignore.txt", "r", encoding="utf-8") as f:
              for line in f:
                  word = line.strip()
                  ignore_list[word.lower()] = word  # Store lowercase -> correct-case

          # Function to determine if an ignore list word should be used
          def should_use_ignore_list(original, suggestion):
              best_match, score = process.extractOne(original, ignore_list.keys())
              
              # Must be at least 90% similar to be considered a match
              if score < 90:
                  return False
              
              # Reject if original contains best_match as a substring (e.g., "certifcate" vs "CE")
              if best_match in original and len(original) > len(best_match):
                  return False

              return True

          # Process spellcheck output
          with open("spellcheck_report_raw.txt", "r", encoding="utf-8") as infile, open("spellcheck_report.txt", "w", encoding="utf-8") as outfile:
              for line in infile:
                  match = re.match(r"(.*):(\d+): (\S+) ==> (\S+)", line)
                  if match:
                      file_path, line_number, original, suggestion = match.groups()
                      corrected_word = suggestion

                      # Apply correct capitalization from ignore list if appropriate
                      if suggestion.lower() in ignore_list:
                          corrected_word = ignore_list[suggestion.lower()]

                      # If original word is very similar to an ignored word, prefer that correction
                      elif should_use_ignore_list(original, suggestion):
                          best_match, _ = process.extractOne(original, ignore_list.keys())
                          corrected_word = ignore_list[best_match]

                      # Write final output
                      outfile.write(f"{file_path}:{line_number}: {original} ==> {corrected_word}\n")
          EOF

      - name: Debugging - Print Spellcheck Report
        if: always()
        run: |
          if [ -s spellcheck_report.txt ]; then
            cat spellcheck_report.txt
          else
            echo "No errors recorded."
          fi

      - name: Upload Spellcheck Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spellcheck-report
          path: spellcheck_report.txt
          
      - name: Post Inline Suggestions
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_ACTIONS }}
        run: |
          if [ -s spellcheck_report.txt ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            REPO="${{ github.repository }}"
            COMMIT_ID="${{ github.event.pull_request.head.sha }}"

            echo "Processing spellcheck suggestions..."
            while IFS= read -r line || [[ -n "$line" ]]; do
              FILE=$(echo "$line" | cut -d ':' -f 1)
              LINE_NUMBER=$(echo "$line" | cut -d ':' -f 2)
              ORIGINAL_WORD=$(echo "$line" | awk '{print $3}')
              CORRECTED_WORD=$(echo "$line" | awk '{print $5}')

              if [ -f "$FILE" ]; then
                # Extract the original line from the file
                ORIGINAL_LINE=$(sed -n "${LINE_NUMBER}p" "$FILE")

                # Ensure escaping of special characters in JSON payload
                ESCAPED_ORIGINAL=$(echo "$ORIGINAL_LINE" | sed 's/"/\\"/g')
                ESCAPED_SUGGESTED=$(echo "$ESCAPED_ORIGINAL" | sed "s/\b${ORIGINAL_WORD}\b/${CORRECTED_WORD}/g")

                # Construct the GitHub suggestion JSON payload
                SUGGESTION_BODY=$(jq -n \
                  --arg body "#### üìù Spelling Suggestion\n\`\`\`suggestion\n$ESCAPED_SUGGESTED\n\`\`\`\n*Suggested change in \`$FILE\`, line $LINE_NUMBER*" \
                  --arg commit_id "$COMMIT_ID" \
                  --arg path "$FILE" \
                  --argjson line "$LINE_NUMBER" \
                  '{ body: $body, commit_id: $commit_id, path: $path, line: $line, side: "RIGHT" }')

                # Post the suggestion using GitHub API
                RESPONSE=$(curl -s -X POST -H "Authorization: Bearer $GITHUB_TOKEN" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -d "$SUGGESTION_BODY" "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER/comments")

                # Check response for errors
                if echo "$RESPONSE" | grep -q '"message": "Validation Failed"'; then
                  echo "‚ùå Failed to post suggestion. GitHub API Response:"
                  echo "$RESPONSE"
                else
                  echo "‚úÖ Suggestion posted successfully for $FILE at line $LINE_NUMBER"
                fi

                sleep 1  # Prevent GitHub rate limiting
              fi
            done < spellcheck_report.txt
          else
            echo "No spelling errors found."
          fi
            done < spellcheck_report.txt
          else
            echo "No spelling errors found."
          fi
