name: Manual Spellcheck & Auto PR

on:
  workflow_dispatch:  # Runs only when manually triggered

permissions:
  contents: write  # Needed to push changes to a new branch
  pull-requests: write  # Needed to create a PR

jobs:
  spellcheck:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          pip install codespell
          pip install fuzzywuzzy[speedup]
          pip install sentence-splitter

      - name: Verify Spellcheck Ignore List Exists
        run: |
          if [ ! -f .github/spellcheck-ignore.txt ]; then
            echo "Error: spellcheck-ignore.txt not found!" && exit 1
          fi

      - name: Run Spellcheck and Apply Fixes
        run: |
          set -e  # Exit on error

          # Run codespell and save output without applying fixes automatically
          codespell --ignore-words=.github/spellcheck-ignore.txt \
                    --skip=".git,*.lock,*.json,*.yaml,*.yml,*.css,*.html" \
                    --quiet-level=2 > spellcheck_report_raw.txt || true

          # Process corrections with Python
          # Run codespell directly in memory and process output with Python
          python3 <<EOF
          import re
          import os
          import subprocess
          from sentence_splitter import SentenceSplitter
          from fuzzywuzzy import process

          # Run codespell and capture output in memory (without saving to a file)
          try:
              result = subprocess.run([
                  "codespell",
                  "--ignore-words=.github/spellcheck-ignore.txt",
                  "--skip=.git,*.lock,*.json,*.yaml,*.yml,*.css,*.html",
                  "--quiet-level=2"
              ], capture_output=True, text=True, check=False)
              spellcheck_output = result.stdout.strip()
          except Exception as e:
              print(f"Error running codespell: {e}")
              spellcheck_output = ""

          if not spellcheck_output:
              print("No spelling corrections found. Exiting.")
              exit(0)

          # Load spellcheck ignore list with case sensitivity
          ignore_list = {}
          with open(".github/spellcheck-ignore.txt", "r", encoding="utf-8") as f:
              for line in f:
                  word = line.strip()
                  ignore_list[word.lower()] = word  # Store lowercase -> correct-case

          # Common phrases to prioritize in spellcheck corrections
          common_phrases = {
              "identity provider": ["identiy provider", "identify provider"],
              "access token": ["access toekn", "acess token"],
              "user authentication": ["user authentification", "user authenthication"],
              "API gateway": ["API getway", "API gatway"]
          }

          # Function to check if a word is inside a code block, backticks, URL, or file reference
          def is_code_or_url_or_file(line):
              return bool(re.search(r'`.*?`|https?://\S+|www\.\S+|/[\w./-]+', line))

          # Function to check if a word is part of a Markdown link
          def is_markdown_link(line, original):
              return bool(re.search(r'\[.*?\]\(.*' + re.escape(original) + r'.*\)', line))

          # Function to determine if an ignore list word should be used
          def should_use_ignore_list(original, suggestion, line):
              best_match, score = process.extractOne(original, ignore_list.keys())

              # Must be at least 90% similar to be considered a match
              if score < 90:
                  return False

              # Reject if original contains best_match as a substring (e.g., "certifcate" vs "CE")
              if best_match in original and len(original) > len(best_match):
                  return False

              return True

          # Function to apply strict context-based correction rules
          def apply_strict_context_correction(sentence, original, suggestion):
              # Prioritize known common phrases first
              for correct_phrase, wrong_variants in common_phrases.items():
                  for wrong_phrase in wrong_variants:
                      if wrong_phrase in sentence:
                          return sentence.replace(wrong_phrase, correct_phrase)

              # Replace the misspelled word with the correct word **only once**
              return re.sub(r'\b' + re.escape(original) + r'\b', suggestion, sentence, count=1)

          # Process spellcheck output and apply fixes
          for line in spellcheck_output.splitlines():
              match = re.match(r"(.*):(\d+): (\S+) ==> (\S+)", line)
              if match:
                  file_path, line_number, original, suggestion = match.groups()
                  corrected_word = suggestion

                  # Skip if the file does not exist
                  if not os.path.isfile(file_path):
                      print(f"Warning: File {file_path} not found. Skipping correction.")
                      continue

                  # Read the full line from the file safely
                  with open(file_path, "r", encoding="utf-8") as file:
                      content_lines = file.readlines()

                  # Validate line number
                  line_idx = int(line_number) - 1
                  if line_idx < 0 or line_idx >= len(content_lines):
                      print(f"Warning: Line number {line_number} out of range for file {file_path}. Skipping correction.")
                      continue

                  context_line = content_lines[line_idx].strip()

                  # âœ… Use sentence-splitter to analyze full sentence context
                  splitter = SentenceSplitter(language="en")
                  sentences = splitter.split(context_line)
                  relevant_sentence = next((s for s in sentences if original in s), context_line)

                  # **Fix #1: Enforce strict case-sensitive ignore list rules**
                  if original.lower() in ignore_list:
                      if is_code_or_url_or_file(relevant_sentence) or is_markdown_link(relevant_sentence, original):
                          corrected_word = original.lower()  # Keep lowercase in URLs, links, or file paths
                      else:
                          corrected_word = ignore_list[original.lower()]  # Use exact case from ignore list

                  # **Fix #2: Reject weak matches to ignore words**
                  elif should_use_ignore_list(original, suggestion, relevant_sentence):
                      best_match, _ = process.extractOne(original, ignore_list.keys())
                      corrected_word = ignore_list[best_match]

                  # **Fix #3: Strictly prevent weak ignore word matches**
                  elif len(original) < 3 or len(original) < len(ignore_list.get(suggestion.lower(), "")) / 2:
                      corrected_word = suggestion  # Use the English dictionary instead

                  # **Fix #4: Apply strict context-based correction**
                  relevant_sentence = apply_strict_context_correction(relevant_sentence, original, corrected_word)

                  # **Fix #5: Strictly prevent punctuation modifications**
                  relevant_sentence = relevant_sentence.replace("..", ".").replace(",.", ".").replace(" ,", ",")

                  # Apply fix while maintaining case rules
                  content_lines[line_idx] = relevant_sentence + "\n"
                  with open(file_path, "w", encoding="utf-8") as file:
                      file.writelines(content_lines)
          EOF

          # Check if any files were modified
          if git status --porcelain | grep -q '^ M'; then
            echo "Corrections applied. Preparing to create PR."
          else
            echo "No spelling corrections found. Exiting."
            exit 0
          fi

      - name: Create Pull Request with Corrections
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_ACTIONS }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          BRANCH_NAME="spellcheck-fixes-$(date +%s)"
          git checkout -b $BRANCH_NAME

          # Commit the changes if there are any
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Spellcheck: Automatically fixed detected misspellings"
            git push origin $BRANCH_NAME

            # Create PR using GitHub CLI
            gh pr create \
              --base main \
              --head $BRANCH_NAME \
              --title "Spellcheck Fixes" \
              --body "This PR contains automatically applied spelling corrections."
          else
            echo "No changes detected. Skipping PR creation."
            exit 0
          fi
