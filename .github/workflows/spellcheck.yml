name: Spellcheck Documentation

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write  # Required for creating a commit
  pull-requests: write  # Required for creating a PR

jobs:
  spellcheck:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          pip install codespell
          pip install fuzzywuzzy[speedup]

      - name: Download Spellcheck Ignore List
        run: |
          if [ ! -f .github/spellcheck-ignore.txt ]; then
            echo "spellcheck-ignore.txt not found!" && exit 1
          fi

      - name: Run Spellcheck and Process Output
        run: |
          set -e  # Exit on error

          # Run codespell and save output
          codespell --ignore-words=.github/spellcheck-ignore.txt \
                    --skip=".git,*.lock,*.json,*.yaml,*.yml,*.css,*.html" \
                    --quiet-level=2 > spellcheck_report_raw.txt || true

          # Process corrections with Python
          python3 <<EOF
          import re
          from fuzzywuzzy import process

          # Load spellcheck ignore list with case sensitivity
          ignore_list = {}
          with open(".github/spellcheck-ignore.txt", "r", encoding="utf-8") as f:
              for line in f:
                  word = line.strip()
                  ignore_list[word.lower()] = word  # Store lowercase -> correct-case

          # Function to determine if an ignore list word should be used
          def should_use_ignore_list(original, suggestion):
              best_match, score = process.extractOne(original, ignore_list.keys())

              # Must be at least 90% similar to be considered a match
              if score < 90:
                  return False

              # Reject if original contains best_match as a substring (e.g., "certifcate" vs "CE")
              if best_match in original and len(original) > len(best_match):
                  return False

              return True

          # Process spellcheck output
          with open("spellcheck_report_raw.txt", "r", encoding="utf-8") as infile, open("spellcheck_report.txt", "w", encoding="utf-8") as outfile:
              for line in infile:
                  match = re.match(r"(.*):(\d+): (\S+) ==> (\S+)", line)
                  if match:
                      file_path, line_number, original, suggestion = match.groups()
                      corrected_word = suggestion

                      # Apply correct capitalization from ignore list if appropriate
                      if suggestion.lower() in ignore_list:
                          corrected_word = ignore_list[suggestion.lower()]

                      # If original word is very similar to an ignored word, prefer that correction
                      elif should_use_ignore_list(original, suggestion):
                          best_match, _ = process.extractOne(original, ignore_list.keys())
                          corrected_word = ignore_list[best_match]

                      # Write final output
                      outfile.write(f"{file_path}:{line_number}: {original} ==> {corrected_word}\n")
          EOF

      - name: Print Spellcheck Report ðŸ“œ
        if: always()
        run: |
          echo "===== Spellcheck Report ====="
          if [ -s spellcheck_report.txt ]; then
            cat spellcheck_report.txt
          else
            echo "No spelling errors found."
          fi
          echo "============================"

      - name: Apply Suggestions Instead of Direct Fixes
        run: |
          CHANGES_MADE=0
          echo "Applying spellcheck suggestions..."

          while IFS= read -r line; do
            file=$(echo "$line" | cut -d ':' -f 1)
            line_number=$(echo "$line" | cut -d ':' -f 2)
            original_word=$(echo "$line" | cut -d ' ' -f 2)
            corrected_word=$(echo "$line" | cut -d ' ' -f 4)

            if [ -f "$file" ]; then
              # Add GitHub suggestion syntax
              sed -i "${line_number}i <!-- @${{ github.actor }}: Suggested change -->\n\`\`\`suggestion\n${corrected_word}\n\`\`\`\n" "$file" && CHANGES_MADE=1
            fi
          done < spellcheck_report.txt || true

          if [ "$CHANGES_MADE" -eq 0 ]; then
            echo "No changes were made to files. Exiting."
            exit 0
          fi

      - name: Create Pull Request with Suggestions
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_ACTIONS }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          BRANCH_NAME="spellcheck-fixes-$(date +%s)"
          git checkout -b $BRANCH_NAME

          # Verify if any changes were made before committing
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Spellcheck suggestions"
            git push origin $BRANCH_NAME

            # Create PR using GitHub CLI
            gh pr create \
              --base main \
              --head $BRANCH_NAME \
              --title "Spellcheck Fixes" \
              --body "This PR contains spellcheck suggestions. Please review and approve or reject individual suggestions."
          else
            echo "No changes detected. Skipping PR creation."
